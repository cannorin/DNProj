/*
The MIT License (MIT)

DNProj.Templates - Templates of files generated by DNProj.
Copyright (c) 2016 cannorin

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

using System.IO;

namespace DNProj
{
    public static class Templates
    {
        public static string[] HelpOptions { get; } = new []{"--help", "-h", "-?"};

        public static string[] BuildItems { get; } = new []{ "Compile", "EmbeddedResource", "None", "Content" };

        public static string AssemblyInfo { get; } = "AssemblyInfo.cs";

        public static string AssemblyInfoFSharp { get; } = "AssemblyInfo.fs";

        public static string GenerateAssemblyInfo(string name)
        {
            return string.Format(@"using System.Reflection;
using System.Runtime.CompilerServices;

[assembly: AssemblyTitle(""{0}"")]
[assembly: AssemblyDescription("""")]
[assembly: AssemblyConfiguration("""")]
[assembly: AssemblyCompany("""")]
[assembly: AssemblyProduct("""")]
[assembly: AssemblyCopyright("""")]
[assembly: AssemblyTrademark("""")]
[assembly: AssemblyCulture("""")]
[assembly: AssemblyVersion(""1.0.*"")]
//[assembly: AssemblyDelaySign(false)]
//[assembly: AssemblyKeyFile("""")]
", name);
        }

        public static string GenerateLibraryClass(string name, string className = "MyClass")
        {
            return string.Format(@"﻿using System;

namespace {0} 
{{
    public class {1}
    {{
        public {1}()
        {{
        }}
    }}
}}
", name, className);
        }

        public static string GenerateExeClass(string name)
        {
            return string.Format(@"﻿using System;

namespace {0}
{{
    class MainClass
    {{
        public static void Main(string[] args)
        {{
            Console.WriteLine(""Hello World!"");
        }}
    }}
}}", name);
        }

        public static string GenerateAssemblyInfoFSharp(string name)
        {
            return string.Format(@"module {0}.AssemblyInfo

open System.Reflection
open System.Runtime.CompilerServices

[<assembly:AssemblyTitle(""{0}"")>]
[<assembly:AssemblyDescription("""")>]
[<assembly:AssemblyConfiguration("""")>]
[<assembly:AssemblyCompany("""")>]
[<assembly:AssemblyProduct("""")>]
[<assembly:AssemblyCopyright("""")>]
[<assembly:AssemblyTrademark("""")>]
[<assembly:AssemblyVersion(""1.0.0.0"")>]
//[<assembly: AssemblyDelaySign(false)>]
//[<assembly: AssemblyKeyFile("""")>]
()
", name);
        }

        public static string GenerateLibraryFSharp(string name, string className = "Class1")
        {
            return string.Format(@"namespace {0}

type {1}() = 
  member this.X = ""F#""", name, className);
        }

        public static string GenerateExeFSharp()
        {
            return @"[<EntryPoint>]
let main argv = 
  printfn ""%A"" argv
  0";
        }

        public static string GenPath(string prefixDir, string fileName)
        {
            if (string.IsNullOrEmpty(prefixDir))
                return fileName;
            return Path.Combine(prefixDir, fileName);
        }
    }
}

